# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Instalación de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: "tallerCICD/package-lock.json"

      - name: Instala dependencias
        working-directory: ./tallerCICD
        run: npm ci

      - name: Test automáticos
        working-directory: ./tallerCICD
        run: node --test
      - name: Notificar fallo en Slack
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "⚠️ Falló el test\n• *Repositorio*: `${{ github.repository }}`\n• *Razón*: Revisa los logs\n• *Commit*: `${{ github.sha }}`\n• *Logs*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver detalles>",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#ff0000",
                  "text": "Posibles causas:\n- Error en `npm run build`\n- Problema con GitHub Pages\n- Variables de entorno faltantes"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Notificar éxito en Slack
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "*✅ Test exitoso*\n ",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Instalar dependencias y construir
        working-directory: ./tallerCICD
        run: |
          npm ci
          npm run build
      - name: Desplegar en GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./tallerCICD/dist
      - name: Notificar éxito en Slack
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "*✅ Despliegue exitoso*\n• *Repositorio*: `${{ github.repository }}`\n• *URL*: <https://danielbenjaminlopez.github.io/taller-CI-CD/|Ver sitio>\n• *Commit*: `${{ github.sha }}`",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notificar fallo en Slack
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "⚠️ Falló el despliegue\n• *Repositorio*: `${{ github.repository }}`\n• *Razón*: Revisa los logs\n• *Commit*: `${{ github.sha }}`\n• *Logs*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver detalles>",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#ff0000",
                  "text": "Posibles causas:\n- Error en `npm run build`\n- Problema con GitHub Pages\n- Variables de entorno faltantes"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  lighthouse:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Instalación de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Ejecutar Lighthouse CI
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: https://danielbenjaminlopez.github.io/taller-CI-CD/
          uploadArtifacts: true

      - name: Parsear el Resumen de Lighthouse
        id: parse_lighthouse_summary
        if: success() && steps.lighthouse_audit.outcome == 'success'
        run: |
          set -euxo pipefail
          MANIFEST_PATH="${{ steps.lighthouse_audit.outputs.resultsPath }}/manifest.json"
          echo "Leyendo resultados desde: ${MANIFEST_PATH}"
          cat "${MANIFEST_PATH}"
          PERF_SCORE=$(jq -r '.[0].summary.performance | .* 100 | round' "${MANIFEST_PATH}")
          ACC_SCORE=$(jq -r '.[0].summary.accessibility | .* 100 | round' "${MANIFEST_PATH}")
          BP_SCORE=$(jq -r '.[0].summary."best-practices" | .* 100 | round' "${MANIFEST_PATH}")
          SEO_SCORE=$(jq -r '.[0].summary.seo | .* 100 | round' "${MANIFEST_PATH}")
          PWA_SCORE=$(jq -r '.[0].summary.pwa | .* 100 | round' "${MANIFEST_PATH}")
          echo "performance_score=${PERF_SCORE}" >> $GITHUB_OUTPUT
          echo "accessibility_score=${ACC_SCORE}" >> $GITHUB_OUTPUT
          echo "best_practices_score=${BP_SCORE}" >> $GITHUB_OUTPUT
          echo "seo_score=${SEO_SCORE}" >> $GITHUB_OUTPUT
          echo "pwa_score=${PWA_SCORE}" >> $GITHUB_OUTPUT

      - name: Construir Payload de Slack
        id: build_slack_payload
        if: success() && steps.parse_lighthouse_summary.outcome == 'success'
        run: |
          # Función para obtener el color según la puntuación
          get_color() {
            SCORE=$1
            if (( SCORE >= 90 )); then
              echo "#2cbe4e" # Verde
            elif (( SCORE >= 50 )); then
              echo "#f2c744" # Naranja
            else
              echo "#cb2431" # Rojo
            fi
          }

          # Obtenemos las puntuaciones del paso anterior
          PERF_SCORE=${{ steps.parse_lighthouse_summary.outputs.performance_score }}
          ACC_SCORE=${{ steps.parse_lighthouse_summary.outputs.accessibility_score }}
          BP_SCORE=${{ steps.parse_lighthouse_summary.outputs.best_practices_score }}
          SEO_SCORE=${{ steps.parse_lighthouse_summary.outputs.seo_score }}
          PWA_SCORE=${{ steps.parse_lighthouse_summary.outputs.pwa_score }}

          # Asignamos los colores
          PERF_COLOR=$(get_color $PERF_SCORE)
          ACC_COLOR=$(get_color $ACC_SCORE)
          BP_COLOR=$(get_color $BP_SCORE)
          SEO_COLOR=$(get_color $SEO_SCORE)
          PWA_COLOR=$(get_color $PWA_SCORE)

          # Obtenemos información del commit y del autor
          COMMIT_SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          COMMIT_URL="<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${COMMIT_SHA_SHORT}>"

          # Creamos el JSON completo usando jq y lo guardamos como un output multilínea
          {
            echo 'payload<<EOF'
            jq -n \
              --arg perf_score "$PERF_SCORE" --arg perf_color "$PERF_COLOR" \
              --arg acc_score "$ACC_SCORE" --arg acc_color "$ACC_COLOR" \
              --arg bp_score "$BP_SCORE" --arg bp_color "$BP_COLOR" \
              --arg seo_score "$SEO_SCORE" --arg seo_color "$SEO_COLOR" \
              --arg pwa_score "$PWA_SCORE" --arg pwa_color "$PWA_COLOR" \
              --arg commit_url "$COMMIT_URL" \
              --arg actor "${{ github.actor }}" \
              --arg report_url "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Lighthouse audit>" \
              '{
                "text": "Auditoría Lighthouse finalizada. Performance: \($perf_score)",
                "blocks": [
                  {
                    "type": "section",
                    "text": { "type": "mrkdwn", "text": "\($report_url) para *${{ github.repository }}*" },
                    "accessory": {
                      "type": "image",
                      "image_url": "https://raw.githubusercontent.com/GoogleChrome/lighthouse/master/assets/lighthouse-logo.png",
                      "alt_text": "Lighthouse logo"
                    }
                  },
                  {
                    "type": "context",
                    "elements": [
                      { "type": "mrkdwn", "text": "Commit \($commit_url) by \($actor)" }
                    ]
                  }
                ],
                "attachments": [
                  { "color": $perf_color, "blocks": [{ "type": "section", "text": { "type": "mrkdwn", "text": "*Performance:* \($perf_score)" }}]},
                  { "color": $acc_color, "blocks": [{ "type": "section", "text": { "type": "mrkdwn", "text": "*Accessibility:* \($acc_score)" }}]},
                  { "color": $bp_color, "blocks": [{ "type": "section", "text": { "type": "mrkdwn", "text": "*Best Practices:* \($bp_score)" }}]},
                  { "color": $seo_color, "blocks": [{ "type": "section", "text": { "type": "mrkdwn", "text": "*SEO:* \($seo_score)" }}]},
                  { "color": $pwa_color, "blocks": [{ "type": "section", "text": { "type": "mrkdwn", "text": "*Progressive Web App:* \($pwa_score)" }}]}
                ]
              }'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Notificar éxito de Lighthouse en Slack
        if: success() && steps.build_slack_payload.outcome == 'success'
        uses: slackapi/slack-github-action@v1
        with:
          # Usamos el payload JSON que generamos en el paso anterior
          payload: ${{ steps.build_slack_payload.outputs.payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notificar fallo de Lighthouse en Slack
        if: failure() || steps.lighthouse_audit.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "⚠️ Auditoría Lighthouse fallida",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ *Auditoría Lighthouse fallida*\n• *Razón*: Revisa los logs de la acción de Lighthouse CI para más detalles.\n• *Logs*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver detalles>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update-taiga:
    needs: lighthouse # Asegura que Taiga se actualice después de los tests y Lighthouse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to access full git history for commit parsing

      - name: Update Taiga User Story
        id: taiga
        uses: lauacosta/backlogr-action@v0.0.2
        continue-on-error: true
        with:
          taiga-username: ${{ secrets.TAIGA_USERNAME }}
          taiga-password: ${{ secrets.TAIGA_PASSWORD }}
          project-name: ${{ secrets.PROJECT_NAME }}

      - name: Report Status
        run: |
          if [ "${{ steps.taiga.outputs.success }}" == "true" ]; then
            echo "✅ User Story #${{ steps.taiga.outputs.user-story-id }} → ${{ steps.taiga.outputs.action-taken }}"
          else
            echo "❌ User Story update failed - check commit format and Taiga connection"
            exit 1 # Use exit 1 to explicitly fail the step if Taiga update fails
          fi
      #NOTIFICACIONES_1
      - name: Always notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            📧Taiga update ${{ job.status }} for commit: ${{ github.event.head_commit.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
