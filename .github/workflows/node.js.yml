# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Instalaci√≥n de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: "tallerCICD/package-lock.json"

      - name: Instala dependencias
        working-directory: ./tallerCICD
        run: npm ci

      - name: Test autom√°ticos
        working-directory: ./tallerCICD
        run: node --test
      - name: Notificar fallo en Slack
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚ö†Ô∏è Fall√≥ el test\n‚Ä¢ *Repositorio*: `${{ github.repository }}`\n‚Ä¢ *Raz√≥n*: Revisa los logs\n‚Ä¢ *Commit*: `${{ github.sha }}`\n‚Ä¢ *Logs*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver detalles>",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#ff0000",
                  "text": "Posibles causas:\n- Error en `npm run build`\n- Problema con GitHub Pages\n- Variables de entorno faltantes"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Notificar √©xito en Slack
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "*‚úÖ Test exitoso*\n ",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Instalar dependencias y construir
        working-directory: ./tallerCICD
        run: |
          npm ci
          npm run build
      - name: Desplegar en GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./tallerCICD/dist
      - name: Notificar √©xito en Slack
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "*‚úÖ Despliegue exitoso*\n‚Ä¢ *Repositorio*: `${{ github.repository }}`\n‚Ä¢ *URL*: <https://danielbenjaminlopez.github.io/taller-CI-CD/|Ver sitio>\n‚Ä¢ *Commit*: `${{ github.sha }}`",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notificar fallo en Slack
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚ö†Ô∏è Fall√≥ el despliegue\n‚Ä¢ *Repositorio*: `${{ github.repository }}`\n‚Ä¢ *Raz√≥n*: Revisa los logs\n‚Ä¢ *Commit*: `${{ github.sha }}`\n‚Ä¢ *Logs*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver detalles>",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": " "
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#ff0000",
                  "text": "Posibles causas:\n- Error en `npm run build`\n- Problema con GitHub Pages\n- Variables de entorno faltantes"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  lighthouse:
    needs: deploy # Asegura que Lighthouse se ejecute despu√©s del despliegue
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Necesario para acceder a los archivos del repositorio si fuera necesario

      - name: Instalar Lighthouse CI y jq
        run: |
          npm install -g @lhci/cli # Instala la herramienta de l√≠nea de comandos de Lighthouse CI
          sudo apt-get update && sudo apt-get install -y jq # Instala 'jq' para parsear el JSON del reporte

      - name: Ejecutar Auditor√≠a Lighthouse
        # Esta acci√≥n ejecuta Lighthouse y guarda los reportes en una carpeta .lighthouseci/
        # continue-on-error: true permite que los siguientes pasos se ejecuten incluso si la auditor√≠a tiene fallos
        run: lhci collect --url=https://danielbenjaminlopez.github.io/taller-CI-CD/ --output-path=.lighthouseci/
        continue-on-error: true

      - name: Subir artefactos de Lighthouse (opcional, para revisar los reportes en GitHub Actions)
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: ./.lighthouseci/

      - name: Obtener resultados de Lighthouse y preparar payload de Slack
        id: prepare_slack_payload # Le damos un ID a este paso para poder referenciar sus salidas
        run: |
          # Buscar la ruta del √∫ltimo reporte JSON generado por Lighthouse
          LIGHTHOUSE_REPORT_PATH=$(find ./.lighthouseci -name "*.json" | head -n 1)

          # Inicializar variables por defecto para el caso de que no se encuentre el reporte
          SLACK_TEXT_FALLO="‚ö†Ô∏è *Auditor√≠a Lighthouse Fallida* para ${{ github.repository }}. No se pudo generar el reporte."

          if [ -f "$LIGHTHOUSE_REPORT_PATH" ]; then
            # Parsear el reporte JSON para obtener las puntuaciones de las categor√≠as
            PERF_SCORE=$(jq '."categories"."performance"."score"' "$LIGHTHOUSE_REPORT_PATH")
            ACC_SCORE=$(jq '."categories"."accessibility"."score"' "$LIGHTHOUSE_REPORT_PATH")
            BP_SCORE=$(jq '."categories"."best-practices"."score"' "$LIGHTHOUSE_REPORT_PATH")
            SEO_SCORE=$(jq '."categories"."seo"."score"' "$LIGHTHOUSE_REPORT_PATH")

            # Convertir las puntuaciones de 0-1 a 0-100 y formatear a entero sin decimales
            PERF_SCORE_FORMATTED=$(awk "BEGIN {printf \"%.0f\", $PERF_SCORE * 100}")
            ACC_SCORE_FORMATTED=$(awk "BEGIN {printf \"%.0f\", $ACC_SCORE * 100}")
            BP_SCORE_FORMATTED=$(awk "BEGIN {printf \"%.0f\", $BP_SCORE * 100}")
            SEO_SCORE_FORMATTED=$(awk "BEGIN {printf \"%.0f\", $SEO_SCORE * 100}")

            SLACK_TEXT_EXITO="*üìä Auditor√≠a Lighthouse Completada para ${{ github.repository }}*"
            
            # Contenido del campo 'text' dentro del bloque mrkdwn para el mensaje detallado
            BLOCK_MRKDWN_CONTENT="*URL Auditada*: <https://danielbenjaminlopez.github.io/taller-CI-CD/|https://danielbenjaminlopez.github.io/taller-CI-CD/>\n"
            BLOCK_MRKDWN_CONTENT+="*Rendimiento*: \`${PERF_SCORE_FORMATTED}\`\n"
            BLOCK_MRKDWN_CONTENT+="*Accesibilidad*: \`${ACC_SCORE_FORMATTED}\`\n"
            BLOCK_MRKDWN_CONTENT+="*Mejores Pr√°cticas*: \`${BP_SCORE_FORMATTED}\`\n"
            BLOCK_MRKDWN_CONTENT+="*SEO*: \`${SEO_SCORE_FORMATTED}\`\n"
            BLOCK_MRKDWN_CONTENT+="*Ver Logs de la Acci√≥n*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver detalles>"

            # Construir el payload completo para Slack usando jq.
            # jq se encarga autom√°ticamente de escapar los caracteres necesarios para JSON.
            SLACK_PAYLOAD=$(jq -n \
              --arg text "$SLACK_TEXT_EXITO" \
              --arg markdown_text "$BLOCK_MRKDWN_CONTENT" \
              '{
                "text": $text,
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": $markdown_text
                    }
                  }
                ]
              }')
          else
            # Payload para Slack en caso de que no se encuentre el reporte de Lighthouse
            SLACK_PAYLOAD=$(jq -n \
              --arg text "$SLACK_TEXT_FALLO" \
              '{
                "text": $text,
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": $text
                    }
                  }
                ]
              }')
          fi

          # Establecer la salida del payload de Slack. El uso de "EOF" permite pasar cadenas multil√≠nea.
          echo "SLACK_PAYLOAD<<EOF" >> "$GITHUB_OUTPUT"
          echo "$SLACK_PAYLOAD" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        shell: bash # Especificamos 'bash' para un comportamiento consistente en el script

      - name: Notificar resultados de Lighthouse en Slack
        uses: slackapi/slack-github-action@v1
        with:
          # Usamos la salida 'SLACK_PAYLOAD' del paso anterior
          payload: ${{ steps.prepare_slack_payload.outputs.SLACK_PAYLOAD }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Usa tu Webhook URL existente

  update-taiga:
    needs: lighthouse # Asegura que Taiga se actualice despu√©s de los tests y Lighthouse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to access full git history for commit parsing

      - name: Update Taiga User Story
        id: taiga
        uses: lauacosta/backlogr-action@v0.0.2
        continue-on-error: true
        with:
          taiga-username: ${{ secrets.TAIGA_USERNAME }}
          taiga-password: ${{ secrets.TAIGA_PASSWORD }}
          project-name: ${{ secrets.PROJECT_NAME }}

      - name: Report Status
        run: |
          if [ "${{ steps.taiga.outputs.success }}" == "true" ]; then
            echo "‚úÖ User Story #${{ steps.taiga.outputs.user-story-id }} ‚Üí ${{ steps.taiga.outputs.action-taken }}"
          else
            echo "‚ùå User Story update failed - check commit format and Taiga connection"
            exit 1 # Use exit 1 to explicitly fail the step if Taiga update fails
          fi
      #NOTIFICACIONES_1
      - name: Always notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üìßTaiga update ${{ job.status }} for commit: ${{ github.event.head_commit.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
